name: Frontend CD

on:
  push:
    branches: [ main ]
    paths: 
      - 'frontend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: '18.14.2' # comes from .nvmrc
      - name: Clean npm cache and remove node_modules
        working-directory: starter/frontend
        run: |
          npm cache clean --force
          rm -rf node_modules
      - name: Install dependencies
        working-directory: starter/frontend
        run: npm install
      - name: Run Linter
        working-directory: starter/frontend
        run: npm run lint -- --fix

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 
        uses: actions/setup-node@v4
        with:
          node-version: '18.14.2' # comes from .nvmrc
      - name: Clean npm cache and remove node_modules
        working-directory: starter/frontend
        run: |
          npm cache clean --force
          rm -rf node_modules
      - name: Install dependencies
        working-directory: starter/frontend
        run: npm install
      - name: Run Tests
        working-directory: starter/frontend
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.14.2'
      - name: Run build
        working-directory: starter/frontend
        run: |
          echo 'Image built in next job'

  deploy:
    runs-on: ubuntu-latest
    environment: Production
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.14.2'

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login into AWS
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Deploy image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
          REACT_APP_MOVIE_API_URL: a213309367f1544dcacc1c410b62fa4b-1016477180.us-east-1.elb.amazonaws.com
        working-directory: starter/frontend
        run: |
          docker build --build-arg REACT_APP_MOVIE_API_URL=$REACT_API_URL -t $REPOSITORY:$IMAGE_TAG .
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo 'Image tagged and pushed to ECR'

      - name: Prepare EKS
        working-directory: starter/frontend
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1

      - name: Set docker image
        working-directory: starter/frontend/k8s
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kustomize edit set image frontend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy to kubernetes
        working-directory: starter/frontend/k8s
        run: |
          kubectl kustomize | kubectl apply -f -