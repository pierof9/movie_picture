name: Backend CD

on:
  push:
    branches: [ main ]
    paths: 
      - 'backend/**'
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        working-directory: starter/backend
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv lock
          pipenv install --system --deploy

      - name: Run lint
        working-directory: starter/backend
        run: |
          pip install flake8
          pipenv run lint
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        working-directory: starter/backend
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install --system --deploy

      - name: Run test
        working-directory: starter/backend
        run: pytest

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Run build
        env:
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        working-directory: starter/backend
        run: |
          echo 'Image built in next job'

  deploy:
    runs-on: ubuntu-latest
    environment: Production
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login into AWS
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and Deploy image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        working-directory: starter/backend
        run: |
          docker build -t $REPOSITORY:$IMAGE_TAG .
          docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo 'Image tagged and pushed to ECR'

      - name: Prepare EKS
        working-directory: starter/backend
        run: |
          aws eks update-kubeconfig --name cluster --region us-east-1
          aws eks update-cluster-config --name cluster --access-config authenticationMode=API_AND_CONFIG_MAP

      - name: Run init.sh
        run:  |
          chmod +x init.sh 
          ./init.sh || true
          kubectl config view
        working-directory: setup

      - name: Set docker image
        working-directory: starter/backend/k8s
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Deploy to kubernetes
        working-directory: starter/backend/k8s
        run: |
          kustomize build | kubectl apply -f -